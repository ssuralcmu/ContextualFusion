.........Config path for training.............................. {'type': 'CBGSDataset', 'dataset': {'type': 'NuScenesDataset', 'dataset_root': 'data/nuscenes/', 'ann_file': 'data/nuscenes/nuscenes_infos_train.pkl', 'pipeline': [{'type': 'LoadMultiViewImageFromFiles', 'to_float32': True}, {'type': 'LoadPointsFromFile', 'coord_type': 'LIDAR', 'load_dim': 5, 'use_dim': 5, 'reduce_beams': 32, 'load_augmented': None}, {'type': 'LoadPointsFromMultiSweeps', 'sweeps_num': 9, 'load_dim': 5, 'use_dim': 5, 'reduce_beams': 32, 'pad_empty_sweeps': True, 'remove_close': True, 'load_augmented': None}, {'type': 'LoadAnnotations3D', 'with_bbox_3d': True, 'with_label_3d': True, 'with_attr_label': False}, {'type': 'ObjectPaste', 'stop_epoch': -1, 'db_sampler': {'dataset_root': 'data/nuscenes/', 'info_path': 'data/nuscenes/nuscenes_dbinfos_train.pkl', 'rate': 1.0, 'prepare': {'filter_by_difficulty': [-1], 'filter_by_min_points': {'car': 5, 'truck': 5, 'bus': 5, 'trailer': 5, 'construction_vehicle': 5, 'traffic_cone': 5, 'barrier': 5, 'motorcycle': 5, 'bicycle': 5, 'pedestrian': 5}}, 'classes': ['car', 'truck', 'construction_vehicle', 'bus', 'trailer', 'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'], 'sample_groups': {'car': 2, 'truck': 3, 'construction_vehicle': 7, 'bus': 4, 'trailer': 6, 'barrier': 2, 'motorcycle': 6, 'bicycle': 6, 'pedestrian': 2, 'traffic_cone': 2}, 'points_loader': {'type': 'LoadPointsFromFile', 'coord_type': 'LIDAR', 'load_dim': 5, 'use_dim': 5, 'reduce_beams': 32}}}, {'type': 'ImageAug3D', 'final_dim': [256, 704], 'resize_lim': [0.38, 0.55], 'bot_pct_lim': [0.0, 0.0], 'rot_lim': [-5.4, 5.4], 'rand_flip': True, 'is_train': True}, {'type': 'GlobalRotScaleTrans', 'resize_lim': [0.9, 1.1], 'rot_lim': [-0.78539816, 0.78539816], 'trans_lim': 0.5, 'is_train': True}, {'type': 'LoadBEVSegmentation', 'dataset_root': 'data/nuscenes/', 'xbound': [-50.0, 50.0, 0.5], 'ybound': [-50.0, 50.0, 0.5], 'classes': ['drivable_area', 'ped_crossing', 'walkway', 'stop_line', 'carpark_area', 'divider']}, {'type': 'RandomFlip3D'}, {'type': 'PointsRangeFilter', 'point_cloud_range': [-54.0, -54.0, -5.0, 54.0, 54.0, 3.0]}, {'type': 'ObjectRangeFilter', 'point_cloud_range': [-54.0, -54.0, -5.0, 54.0, 54.0, 3.0]}, {'type': 'ObjectNameFilter', 'classes': ['car', 'truck', 'construction_vehicle', 'bus', 'trailer', 'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone']}, {'type': 'ImageNormalize', 'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225]}, {'type': 'GridMask', 'use_h': True, 'use_w': True, 'max_epoch': 6, 'rotate': 1, 'offset': False, 'ratio': 0.5, 'mode': 1, 'prob': 0.0, 'fixed_prob': True}, {'type': 'PointShuffle'}, {'type': 'DefaultFormatBundle3D', 'classes': ['car', 'truck', 'construction_vehicle', 'bus', 'trailer', 'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone']}, {'type': 'Collect3D', 'keys': ['img', 'points', 'gt_bboxes_3d', 'gt_labels_3d', 'gt_masks_bev'], 'meta_keys': ['camera_intrinsics', 'camera2ego', 'lidar2ego', 'lidar2camera', 'camera2lidar', 'lidar2image', 'img_aug_matrix', 'lidar_aug_matrix']}], 'object_classes': ['car', 'truck', 'construction_vehicle', 'bus', 'trailer', 'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'], 'map_classes': ['drivable_area', 'ped_crossing', 'walkway', 'stop_line', 'carpark_area', 'divider'], 'modality': {'use_lidar': True, 'use_camera': True, 'use_radar': False, 'use_map': False, 'use_external': False}, 'test_mode': False, 'use_valid_flag': True, 'box_type_3d': 'LiDAR'}}
.........Config path for training.............................. {'type': 'CBGSDataset', 'dataset': {'type': 'NuScenesDataset', 'dataset_root': 'data/nuscenes/', 'ann_file': 'data/nuscenes/nuscenes_infos_train.pkl', 'pipeline': [{'type': 'LoadMultiViewImageFromFiles', 'to_float32': True}, {'type': 'LoadPointsFromFile', 'coord_type': 'LIDAR', 'load_dim': 5, 'use_dim': 5, 'reduce_beams': 32, 'load_augmented': None}, {'type': 'LoadPointsFromMultiSweeps', 'sweeps_num': 9, 'load_dim': 5, 'use_dim': 5, 'reduce_beams': 32, 'pad_empty_sweeps': True, 'remove_close': True, 'load_augmented': None}, {'type': 'LoadAnnotations3D', 'with_bbox_3d': True, 'with_label_3d': True, 'with_attr_label': False}, {'type': 'ObjectPaste', 'stop_epoch': -1, 'db_sampler': {'dataset_root': 'data/nuscenes/', 'info_path': 'data/nuscenes/nuscenes_dbinfos_train.pkl', 'rate': 1.0, 'prepare': {'filter_by_difficulty': [-1], 'filter_by_min_points': {'car': 5, 'truck': 5, 'bus': 5, 'trailer': 5, 'construction_vehicle': 5, 'traffic_cone': 5, 'barrier': 5, 'motorcycle': 5, 'bicycle': 5, 'pedestrian': 5}}, 'classes': ['car', 'truck', 'construction_vehicle', 'bus', 'trailer', 'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'], 'sample_groups': {'car': 2, 'truck': 3, 'construction_vehicle': 7, 'bus': 4, 'trailer': 6, 'barrier': 2, 'motorcycle': 6, 'bicycle': 6, 'pedestrian': 2, 'traffic_cone': 2}, 'points_loader': {'type': 'LoadPointsFromFile', 'coord_type': 'LIDAR', 'load_dim': 5, 'use_dim': 5, 'reduce_beams': 32}}}, {'type': 'ImageAug3D', 'final_dim': [256, 704], 'resize_lim': [0.38, 0.55], 'bot_pct_lim': [0.0, 0.0], 'rot_lim': [-5.4, 5.4], 'rand_flip': True, 'is_train': True}, {'type': 'GlobalRotScaleTrans', 'resize_lim': [0.9, 1.1], 'rot_lim': [-0.78539816, 0.78539816], 'trans_lim': 0.5, 'is_train': True}, {'type': 'LoadBEVSegmentation', 'dataset_root': 'data/nuscenes/', 'xbound': [-50.0, 50.0, 0.5], 'ybound': [-50.0, 50.0, 0.5], 'classes': ['drivable_area', 'ped_crossing', 'walkway', 'stop_line', 'carpark_area', 'divider']}, {'type': 'RandomFlip3D'}, {'type': 'PointsRangeFilter', 'point_cloud_range': [-54.0, -54.0, -5.0, 54.0, 54.0, 3.0]}, {'type': 'ObjectRangeFilter', 'point_cloud_range': [-54.0, -54.0, -5.0, 54.0, 54.0, 3.0]}, {'type': 'ObjectNameFilter', 'classes': ['car', 'truck', 'construction_vehicle', 'bus', 'trailer', 'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone']}, {'type': 'ImageNormalize', 'mean': [0.485, 0.456, 0.406], 'std': [0.229, 0.224, 0.225]}, {'type': 'GridMask', 'use_h': True, 'use_w': True, 'max_epoch': 6, 'rotate': 1, 'offset': False, 'ratio': 0.5, 'mode': 1, 'prob': 0.0, 'fixed_prob': True}, {'type': 'PointShuffle'}, {'type': 'DefaultFormatBundle3D', 'classes': ['car', 'truck', 'construction_vehicle', 'bus', 'trailer', 'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone']}, {'type': 'Collect3D', 'keys': ['img', 'points', 'gt_bboxes_3d', 'gt_labels_3d', 'gt_masks_bev'], 'meta_keys': ['camera_intrinsics', 'camera2ego', 'lidar2ego', 'lidar2camera', 'camera2lidar', 'lidar2image', 'img_aug_matrix', 'lidar_aug_matrix']}], 'object_classes': ['car', 'truck', 'construction_vehicle', 'bus', 'trailer', 'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'], 'map_classes': ['drivable_area', 'ped_crossing', 'walkway', 'stop_line', 'carpark_area', 'divider'], 'modality': {'use_lidar': True, 'use_camera': True, 'use_radar': False, 'use_map': False, 'use_external': False}, 'test_mode': False, 'use_valid_flag': True, 'box_type_3d': 'LiDAR'}}
dict_items([('car', 5), ('truck', 5), ('bus', 5), ('trailer', 5), ('construction_vehicle', 5), ('traffic_cone', 5), ('barrier', 5), ('motorcycle', 5), ('bicycle', 5), ('pedestrian', 5)])
car 5
dict_items([('car', 5), ('truck', 5), ('bus', 5), ('trailer', 5), ('construction_vehicle', 5), ('traffic_cone', 5), ('barrier', 5), ('motorcycle', 5), ('bicycle', 5), ('pedestrian', 5)])
car 5
truck 5
truck 5
bus 5
trailer 5
construction_vehicle 5
traffic_cone 5
bus 5
trailer 5
barrier 5
construction_vehicle 5
traffic_cone 5
motorcycle 5
barrier 5
bicycle 5
pedestrian 5
motorcycle 5
bicycle 5
pedestrian 5
MODELPARAMS------------------------------------------------------------------------
MODELPARAMS------------------------------------------------------------------------
TOTALPARAMS----------------------
TOTALPARAMS----------------------
336
336
Sample LID weight:  tensor([[[1.]]], device='cuda:0', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample CAM weight:  tensor([[[1.]]], device='cuda:0', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample LID weight:  tensor([[[1.]]], device='cuda:1', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample CAM weight:  tensor([[[1.]]], device='cuda:1', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample LID weight:  tensor([[[1.]]], device='cuda:1', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample CAM weight:  tensor([[[0.3301]]], device='cuda:1', dtype=torch.float16,
       grad_fn=<RsubBackward1>)
Sample LID weight:  tensor([[[1.]]], device='cuda:0', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample CAM weight:  tensor([[[1.]]], device='cuda:0', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample LID weight:  tensor([[[1.]]], device='cuda:1', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample CAM weight:  tensor([[[1.]]], device='cuda:1', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample LID weight:  tensor([[[1.]]], device='cuda:0', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample CAM weight:  tensor([[[1.]]], device='cuda:0', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample LID weight:  tensor([[[1.]]], device='cuda:0', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample CAM weight:  tensor([[[1.]]], device='cuda:0', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample LID weight:  tensor([[[1.]]], device='cuda:1', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample CAM weight:  tensor([[[1.]]], device='cuda:1', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample LID weight:  tensor([[[1.]]], device='cuda:0', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample CAM weight:  tensor([[[1.]]], device='cuda:0', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample LID weight:  tensor([[[1.]]], device='cuda:1', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample CAM weight:  tensor([[[1.]]], device='cuda:1', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample LID weight:  tensor([[[1.]]], device='cuda:1', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample CAM weight:  tensor([[[1.]]], device='cuda:1', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample LID weight:  tensor([[[1.]]], device='cuda:0', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample CAM weight:  tensor([[[1.]]], device='cuda:0', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample LID weight:  tensor([[[1.]]], device='cuda:1', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample CAM weight:  tensor([[[1.]]], device='cuda:1', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample LID weight:  tensor([[[1.]]], device='cuda:0', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample CAM weight:  tensor([[[1.]]], device='cuda:0', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample LID weight:  tensor([[[1.]]], device='cuda:0', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample CAM weight:  tensor([[[1.]]], device='cuda:0', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample LID weight:  tensor([[[1.]]], device='cuda:1', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample CAM weight:  tensor([[[1.]]], device='cuda:1', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample LID weight:  tensor([[[1.]]], device='cuda:0', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample CAM weight:  tensor([[[0.3301]]], device='cuda:0', dtype=torch.float16,
       grad_fn=<RsubBackward1>)
Sample LID weight:  tensor([[[1.]]], device='cuda:1', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample CAM weight:  tensor([[[1.]]], device='cuda:1', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample LID weight:  tensor([[[1.]]], device='cuda:0', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample CAM weight:  tensor([[[1.]]], device='cuda:0', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample LID weight:  tensor([[[1.]]], device='cuda:1', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample CAM weight:  tensor([[[1.]]], device='cuda:1', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample LID weight:  tensor([[[1.]]], device='cuda:1', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample CAM weight:  tensor([[[1.]]], device='cuda:1', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample LID weight:  tensor([[[1.]]], device='cuda:0', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample CAM weight:  tensor([[[1.]]], device='cuda:0', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample LID weight:  tensor([[[1.]]], device='cuda:0', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample CAM weight:  tensor([[[1.]]], device='cuda:0', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample LID weight:  tensor([[[1.]]], device='cuda:1', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample CAM weight:  tensor([[[1.]]], device='cuda:1', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample LID weight:  tensor([[[1.]]], device='cuda:1', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample CAM weight:  tensor([[[1.]]], device='cuda:1', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample LID weight:  tensor([[[1.]]], device='cuda:0', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample CAM weight:  tensor([[[1.]]], device='cuda:0', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample LID weight:  tensor([[[1.]]], device='cuda:0', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample CAM weight:  tensor([[[1.]]], device='cuda:0', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample LID weight:  tensor([[[1.]]], device='cuda:1', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample CAM weight:  tensor([[[1.]]], device='cuda:1', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample LID weight:  tensor([[[1.]]], device='cuda:0', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample CAM weight:  tensor([[[1.]]], device='cuda:0', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample LID weight:  tensor([[[0.9995]]], device='cuda:1', dtype=torch.float16,
       grad_fn=<RsubBackward1>)
Sample CAM weight:  tensor([[[0.3301]]], device='cuda:1', dtype=torch.float16,
       grad_fn=<RsubBackward1>)
Sample LID weight:  tensor([[[1.]]], device='cuda:0', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample CAM weight:  tensor([[[1.]]], device='cuda:0', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample LID weight:  tensor([[[0.9995]]], device='cuda:1', dtype=torch.float16,
       grad_fn=<RsubBackward1>)
Sample CAM weight:  tensor([[[0.3301]]], device='cuda:1', dtype=torch.float16,
       grad_fn=<RsubBackward1>)
Sample LID weight:  tensor([[[1.]]], device='cuda:0', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample CAM weight:  tensor([[[1.]]], device='cuda:0', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample LID weight:  tensor([[[0.9995]]], device='cuda:1', dtype=torch.float16,
       grad_fn=<RsubBackward1>)
Sample CAM weight:  tensor([[[0.3301]]], device='cuda:1', dtype=torch.float16,
       grad_fn=<RsubBackward1>)
Sample LID weight:  tensor([[[1.]]], device='cuda:0', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample CAM weight:  tensor([[[1.]]], device='cuda:0', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample LID weight:  tensor([[[1.]]], device='cuda:1', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample CAM weight:  tensor([[[1.]]], device='cuda:1', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample LID weight:  tensor([[[1.]]], device='cuda:0', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample CAM weight:  tensor([[[1.]]], device='cuda:0', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample LID weight:  tensor([[[1.]]], device='cuda:1', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample CAM weight:  tensor([[[1.]]], device='cuda:1', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample LID weight:  tensor([[[1.]]], device='cuda:0', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample CAM weight:  tensor([[[1.]]], device='cuda:0', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample LID weight:  tensor([[[0.9995]]], device='cuda:1', dtype=torch.float16,
       grad_fn=<RsubBackward1>)
Sample CAM weight:  tensor([[[0.3301]]], device='cuda:1', dtype=torch.float16,
       grad_fn=<RsubBackward1>)
Sample LID weight:  tensor([[[1.]]], device='cuda:0', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample CAM weight:  tensor([[[1.]]], device='cuda:0', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample LID weight:  tensor([[[1.]]], device='cuda:1', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample CAM weight:  tensor([[[1.]]], device='cuda:1', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample LID weight:  tensor([[[1.]]], device='cuda:0', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample CAM weight:  tensor([[[1.]]], device='cuda:0', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample LID weight:  tensor([[[0.9995]]], device='cuda:1', dtype=torch.float16,
       grad_fn=<RsubBackward1>)
Sample CAM weight:  tensor([[[0.3301]]], device='cuda:1', dtype=torch.float16,
       grad_fn=<RsubBackward1>)
Sample LID weight:  tensor([[[0.9995]]], device='cuda:1', dtype=torch.float16,
       grad_fn=<RsubBackward1>)
Sample CAM weight:  tensor([[[0.3301]]], device='cuda:1', dtype=torch.float16,
       grad_fn=<RsubBackward1>)
Sample LID weight:  tensor([[[1.]]], device='cuda:0', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample CAM weight:  tensor([[[1.]]], device='cuda:0', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample LID weight:  tensor([[[1.]]], device='cuda:0', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample CAM weight:  tensor([[[1.]]], device='cuda:0', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample LID weight:  tensor([[[0.9995]]], device='cuda:1', dtype=torch.float16,
       grad_fn=<RsubBackward1>)
Sample CAM weight:  tensor([[[0.3301]]], device='cuda:1', dtype=torch.float16,
       grad_fn=<RsubBackward1>)
Sample LID weight:  tensor([[[1.]]], device='cuda:1', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample CAM weight:  tensor([[[1.]]], device='cuda:1', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample LID weight:  tensor([[[0.9995]]], device='cuda:0', dtype=torch.float16,
       grad_fn=<RsubBackward1>)
Sample CAM weight:  tensor([[[0.3301]]], device='cuda:0', dtype=torch.float16,
       grad_fn=<RsubBackward1>)
Sample LID weight:  tensor([[[1.]]], device='cuda:1', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample CAM weight:  tensor([[[1.]]], device='cuda:1', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample LID weight:  tensor([[[1.]]], device='cuda:0', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample CAM weight:  tensor([[[1.]]], device='cuda:0', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample LID weight:  tensor([[[1.]]], device='cuda:0', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample CAM weight:  tensor([[[1.]]], device='cuda:0', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample LID weight:  tensor([[[1.]]], device='cuda:1', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample CAM weight:  tensor([[[1.]]], device='cuda:1', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample LID weight:  tensor([[[1.]]], device='cuda:0', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample CAM weight:  tensor([[[1.]]], device='cuda:0', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample LID weight:  tensor([[[1.]]], device='cuda:1', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample CAM weight:  tensor([[[1.]]], device='cuda:1', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample LID weight:  tensor([[[1.]]], device='cuda:1', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample CAM weight:  tensor([[[1.]]], device='cuda:1', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample LID weight:  tensor([[[1.]]], device='cuda:0', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample CAM weight:  tensor([[[1.]]], device='cuda:0', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample LID weight:  tensor([[[1.]]], device='cuda:0', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample CAM weight:  tensor([[[1.]]], device='cuda:0', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample LID weight:  tensor([[[1.]]], device='cuda:1', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample CAM weight:  tensor([[[1.]]], device='cuda:1', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample LID weight:  tensor([[[1.]]], device='cuda:1', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample CAM weight:  tensor([[[1.]]], device='cuda:1', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample LID weight:  tensor([[[1.]]], device='cuda:0', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample CAM weight:  tensor([[[1.]]], device='cuda:0', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample LID weight:  tensor([[[1.]]], device='cuda:0', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample CAM weight:  tensor([[[1.]]], device='cuda:0', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample LID weight:  tensor([[[1.]]], device='cuda:1', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample CAM weight:  tensor([[[1.]]], device='cuda:1', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample LID weight:  tensor([[[1.]]], device='cuda:1', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample CAM weight:  tensor([[[1.]]], device='cuda:1', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample LID weight:  tensor([[[1.]]], device='cuda:0', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample CAM weight:  tensor([[[1.]]], device='cuda:0', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample LID weight:  tensor([[[1.]]], device='cuda:1', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample CAM weight:  tensor([[[1.]]], device='cuda:1', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample LID weight:  tensor([[[1.]]], device='cuda:0', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample CAM weight:  tensor([[[1.]]], device='cuda:0', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample LID weight:  tensor([[[1.]]], device='cuda:0', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample CAM weight:  tensor([[[1.]]], device='cuda:0', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample LID weight:  tensor([[[1.]]], device='cuda:1', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample CAM weight:  tensor([[[1.]]], device='cuda:1', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample LID weight:  tensor([[[1.]]], device='cuda:0', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample CAM weight:  tensor([[[1.]]], device='cuda:0', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample LID weight:  tensor([[[1.]]], device='cuda:1', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample CAM weight:  tensor([[[1.]]], device='cuda:1', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample LID weight:  tensor([[[1.]]], device='cuda:0', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample CAM weight:  tensor([[[1.]]], device='cuda:0', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample LID weight:  tensor([[[1.]]], device='cuda:1', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample CAM weight:  tensor([[[1.]]], device='cuda:1', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample LID weight:  tensor([[[1.]]], device='cuda:1', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample CAM weight:  tensor([[[1.]]], device='cuda:1', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample LID weight:  tensor([[[1.]]], device='cuda:0', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample CAM weight:  tensor([[[1.]]], device='cuda:0', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample LID weight:  tensor([[[1.]]], device='cuda:0', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample CAM weight:  tensor([[[1.]]], device='cuda:0', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample LID weight:  tensor([[[1.]]], device='cuda:1', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample CAM weight:  tensor([[[1.]]], device='cuda:1', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample LID weight:  tensor([[[1.]]], device='cuda:0', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample CAM weight:  tensor([[[1.]]], device='cuda:0', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample LID weight:  tensor([[[1.]]], device='cuda:1', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample CAM weight:  tensor([[[1.]]], device='cuda:1', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample LID weight:  tensor([[[1.]]], device='cuda:1', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample CAM weight:  tensor([[[1.]]], device='cuda:1', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample LID weight:  tensor([[[1.]]], device='cuda:0', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample CAM weight:  tensor([[[1.]]], device='cuda:0', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample LID weight:  tensor([[[1.]]], device='cuda:0', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample CAM weight:  tensor([[[1.]]], device='cuda:0', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample LID weight:  tensor([[[0.9990]]], device='cuda:1', dtype=torch.float16,
       grad_fn=<RsubBackward1>)
Sample CAM weight:  tensor([[[0.3301]]], device='cuda:1', dtype=torch.float16,
       grad_fn=<RsubBackward1>)
Sample LID weight:  tensor([[[1.]]], device='cuda:0', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample CAM weight:  tensor([[[1.]]], device='cuda:0', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample LID weight:  tensor([[[1.]]], device='cuda:1', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample CAM weight:  tensor([[[1.]]], device='cuda:1', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample LID weight:  tensor([[[1.]]], device='cuda:0', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample CAM weight:  tensor([[[1.]]], device='cuda:0', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample LID weight:  tensor([[[1.]]], device='cuda:1', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample CAM weight:  tensor([[[1.]]], device='cuda:1', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample LID weight:  tensor([[[1.]]], device='cuda:0', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample CAM weight:  tensor([[[1.]]], device='cuda:0', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample LID weight:  tensor([[[0.9990]]], device='cuda:1', dtype=torch.float16,
       grad_fn=<RsubBackward1>)
Sample CAM weight:  tensor([[[0.3301]]], device='cuda:1', dtype=torch.float16,
       grad_fn=<RsubBackward1>)
Sample LID weight:  tensor([[[1.]]], device='cuda:1', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample CAM weight:  tensor([[[1.]]], device='cuda:1', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample LID weight:  tensor([[[1.]]], device='cuda:0', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample CAM weight:  tensor([[[1.]]], device='cuda:0', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample LID weight:  tensor([[[1.]]], device='cuda:1', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample CAM weight:  tensor([[[1.]]], device='cuda:1', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample LID weight:  tensor([[[1.]]], device='cuda:0', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample CAM weight:  tensor([[[1.]]], device='cuda:0', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample LID weight:  tensor([[[1.]]], device='cuda:1', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample CAM weight:  tensor([[[1.]]], device='cuda:1', dtype=torch.float16, grad_fn=<RsubBackward1>)
Sample LID weight:  tensor([[[0.9990]]], device='cuda:0', dtype=torch.float16,
       grad_fn=<RsubBackward1>)
Sample CAM weight:  tensor([[[0.3301]]], device='cuda:0', dtype=torch.float16,
       grad_fn=<RsubBackward1>)
